/**
 * Script de prueba para notificaciones de cambio de estado
 * Verifica que el sistema env√≠e emails autom√°ticamente cuando se actualiza el estado de una orden
 */

require('dotenv').config();
const axios = require('axios');

const API_BASE = 'http://localhost:4000';

async function testNotificacionesCambioEstado() {
  console.log('üß™ INICIANDO PRUEBAS DE NOTIFICACIONES DE CAMBIO DE ESTADO\n');
  
  try {
    // 1. Verificar que el servidor est√© ejecut√°ndose
    console.log('1Ô∏è‚É£ Verificando conexi√≥n con el servidor...');
    try {
      const response = await axios.get(`${API_BASE}/api/notifications/status`);
      console.log('‚úÖ Servidor backend funcionando');
      console.log('üìä Estado de servicios:', response.data);
    } catch (error) {
      console.log('‚ùå Error conectando con el servidor:', error.message);
      console.log('üí° Aseg√∫rate de que el servidor backend est√© ejecut√°ndose en puerto 4000');
      return;
    }

    // 2. Obtener una orden existente para probar
    console.log('\n2Ô∏è‚É£ Obteniendo √≥rdenes existentes...');
    try {
      const response = await axios.get(`${API_BASE}/api/ordenes`);
      const ordenes = response.data;
      
      if (ordenes.length === 0) {
        console.log('‚ùå No hay √≥rdenes en la base de datos para probar');
        console.log('üí° Crea al menos una orden antes de ejecutar esta prueba');
        return;
      }
      
      const ordenPrueba = ordenes[0];
      console.log(`‚úÖ Orden de prueba encontrada: ID ${ordenPrueba.pk_id_orden}`);
      console.log(`üìä Estado actual: ${ordenPrueba.estado_orden}`);
      
      // 3. Obtener estados disponibles
      console.log('\n3Ô∏è‚É£ Obteniendo estados disponibles...');
      const estadosResponse = await axios.get(`${API_BASE}/api/estados`);
      const estados = estadosResponse.data;
      
      console.log('üìä Estados disponibles:');
      estados.forEach(estado => {
        console.log(`   - ${estado.pk_id_estado}: ${estado.estado_orden}`);
      });
      
      // 4. Buscar un estado diferente al actual
      const estadoActual = ordenPrueba.fk_id_estado_orden;
      const nuevoEstado = estados.find(e => e.pk_id_estado !== estadoActual);
      
      if (!nuevoEstado) {
        console.log('‚ùå No hay estados diferentes para probar el cambio');
        return;
      }
      
      console.log(`\n4Ô∏è‚É£ Probando cambio de estado...`);
      console.log(`üîÑ Cambiando de estado ${estadoActual} a ${nuevoEstado.pk_id_estado} (${nuevoEstado.estado_orden})`);
      
      // 5. Actualizar la orden con nuevo estado
      const updateData = {
        fk_id_cliente: ordenPrueba.fk_id_cliente,
        fk_id_vehiculo: ordenPrueba.fk_id_vehiculo,
        fk_id_servicio: ordenPrueba.fk_id_servicio,
        comentario_cliente_orden: ordenPrueba.comentario_cliente_orden,
        nivel_combustible_orden: ordenPrueba.nivel_combustible_orden,
        odometro_auto_cliente_orden: ordenPrueba.odometro_auto_cliente_orden,
        fk_id_estado_orden: nuevoEstado.pk_id_estado,
        observaciones_orden: ordenPrueba.observaciones_orden
      };
      
      const updateResponse = await axios.put(`${API_BASE}/api/ordenes/${ordenPrueba.pk_id_orden}`, updateData);
      
      if (updateResponse.data.estadoCambio) {
        console.log('‚úÖ Estado actualizado correctamente');
        console.log('üìß Notificaci√≥n enviada:', updateResponse.data.notificacionEnviada);
      } else {
        console.log('‚ö†Ô∏è Orden actualizada pero no hubo cambio de estado');
      }
      
      // 6. Verificar que la orden se actualiz√≥
      console.log('\n5Ô∏è‚É£ Verificando actualizaci√≥n...');
      const verifyResponse = await axios.get(`${API_BASE}/api/ordenes/${ordenPrueba.pk_id_orden}`);
      const ordenActualizada = verifyResponse.data;
      
      console.log(`üìä Estado actual de la orden: ${ordenActualizada.estado_orden}`);
      
      if (ordenActualizada.fk_id_estado_orden === nuevoEstado.pk_id_estado) {
        console.log('‚úÖ Estado actualizado correctamente en la base de datos');
      } else {
        console.log('‚ùå Error: El estado no se actualiz√≥ correctamente');
      }
      
      // 7. Restaurar estado original
      console.log('\n6Ô∏è‚É£ Restaurando estado original...');
      const restoreData = {
        ...updateData,
        fk_id_estado_orden: estadoActual
      };
      
      await axios.put(`${API_BASE}/api/ordenes/${ordenPrueba.pk_id_orden}`, restoreData);
      console.log('‚úÖ Estado restaurado al original');
      
      console.log('\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE');
      console.log('\nüìã RESUMEN:');
      console.log('‚úÖ Servidor backend funcionando');
      console.log('‚úÖ Orden de prueba encontrada');
      console.log('‚úÖ Estados disponibles obtenidos');
      console.log('‚úÖ Cambio de estado ejecutado');
      console.log('‚úÖ Notificaci√≥n de cambio enviada');
      console.log('‚úÖ Estado restaurado correctamente');
      
      console.log('\nüí° NOTAS IMPORTANTES:');
      console.log('- Verifica tu bandeja de entrada del email del cliente');
      console.log('- El email debe contener el PDF actualizado');
      console.log('- El asunto debe indicar el cambio de estado');
      console.log('- Si no recibes el email, verifica la configuraci√≥n de email en .env');
      
    } catch (error) {
      console.error('‚ùå Error durante las pruebas:', error.message);
      if (error.response) {
        console.error('üìä Respuesta del servidor:', error.response.data);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

// Ejecutar las pruebas
testNotificacionesCambioEstado();
