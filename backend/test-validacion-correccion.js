/**
 * Script de validaci√≥n de la correcci√≥n del error en notificaciones
 * Verifica que el c√≥digo est√© corregido sin requerir servidor ejecut√°ndose
 */

const fs = require('fs');
const path = require('path');

function validarCorreccionNotificaciones() {
  console.log('üß™ VALIDANDO CORRECCI√ìN DE ERROR EN NOTIFICACIONES\n');
  
  let errores = 0;
  let exitos = 0;
  
  try {
    // 1. Verificar que el archivo notificationService.js existe
    console.log('1Ô∏è‚É£ Verificando archivo notificationService.js...');
    const notificationServicePath = path.join(__dirname, 'services/notificationService.js');
    
    if (fs.existsSync(notificationServicePath)) {
      console.log('‚úÖ Archivo notificationService.js existe');
      exitos++;
    } else {
      console.log('‚ùå Archivo notificationService.js NO existe');
      errores++;
      return;
    }
    
    // 2. Leer el contenido del archivo
    const notificationServiceContent = fs.readFileSync(notificationServicePath, 'utf8');
    
    // 3. Verificar que no hay referencias incorrectas a orderData.cliente.correo_cliente
    console.log('\n2Ô∏è‚É£ Verificando correcci√≥n de referencias...');
    
    if (notificationServiceContent.includes('orderData.cliente.correo_cliente')) {
      console.log('‚ùå A√∫n hay referencias incorrectas a orderData.cliente.correo_cliente');
      errores++;
    } else {
      console.log('‚úÖ No hay referencias incorrectas a orderData.cliente.correo_cliente');
      exitos++;
    }
    
    // 4. Verificar que hay referencias correctas a orderData.correo_cliente
    if (notificationServiceContent.includes('orderData.correo_cliente')) {
      console.log('‚úÖ Referencias correctas a orderData.correo_cliente encontradas');
      exitos++;
    } else {
      console.log('‚ùå No se encontraron referencias correctas a orderData.correo_cliente');
      errores++;
    }
    
    // 5. Verificar que el m√©todo sendStateChangeNotification existe
    console.log('\n3Ô∏è‚É£ Verificando m√©todo sendStateChangeNotification...');
    
    if (notificationServiceContent.includes('sendStateChangeNotification')) {
      console.log('‚úÖ M√©todo sendStateChangeNotification existe');
      exitos++;
    } else {
      console.log('‚ùå M√©todo sendStateChangeNotification NO existe');
      errores++;
    }
    
    // 6. Verificar que el m√©todo sendStateChangeEmail existe en EmailService
    console.log('\n4Ô∏è‚É£ Verificando m√©todo sendStateChangeEmail en EmailService...');
    const emailServicePath = path.join(__dirname, 'services/emailService.js');
    
    if (fs.existsSync(emailServicePath)) {
      const emailServiceContent = fs.readFileSync(emailServicePath, 'utf8');
      
      if (emailServiceContent.includes('sendStateChangeEmail')) {
        console.log('‚úÖ M√©todo sendStateChangeEmail existe en EmailService');
        exitos++;
      } else {
        console.log('‚ùå M√©todo sendStateChangeEmail NO existe en EmailService');
        errores++;
      }
      
      if (emailServiceContent.includes('generateStateChangeEmailContent')) {
        console.log('‚úÖ M√©todo generateStateChangeEmailContent existe');
        exitos++;
      } else {
        console.log('‚ùå M√©todo generateStateChangeEmailContent NO existe');
        errores++;
      }
    } else {
      console.log('‚ùå Archivo emailService.js NO existe');
      errores++;
    }
    
    // 7. Verificar que el endpoint de actualizaci√≥n est√° modificado
    console.log('\n5Ô∏è‚É£ Verificando endpoint de actualizaci√≥n...');
    const indexPath = path.join(__dirname, 'index.js');
    
    if (fs.existsSync(indexPath)) {
      const indexContent = fs.readFileSync(indexPath, 'utf8');
      
      if (indexContent.includes('estadoCambio')) {
        console.log('‚úÖ Endpoint de actualizaci√≥n detecta cambios de estado');
        exitos++;
      } else {
        console.log('‚ùå Endpoint de actualizaci√≥n NO detecta cambios de estado');
        errores++;
      }
      
      if (indexContent.includes('sendStateChangeNotification')) {
        console.log('‚úÖ Endpoint llama a sendStateChangeNotification');
        exitos++;
      } else {
        console.log('‚ùå Endpoint NO llama a sendStateChangeNotification');
        errores++;
      }
    } else {
      console.log('‚ùå Archivo index.js NO existe');
      errores++;
    }
    
    // 8. Verificar que hay manejo de errores
    console.log('\n6Ô∏è‚É£ Verificando manejo de errores...');
    
    if (notificationServiceContent.includes('try {') && notificationServiceContent.includes('} catch (error) {')) {
      console.log('‚úÖ Manejo de errores implementado');
      exitos++;
    } else {
      console.log('‚ùå Manejo de errores NO implementado');
      errores++;
    }
    
    // Resumen final
    console.log('\nüìä RESUMEN DE VALIDACI√ìN:');
    console.log(`‚úÖ √âxitos: ${exitos}`);
    console.log(`‚ùå Errores: ${errores}`);
    console.log(`üìà Porcentaje de √©xito: ${Math.round((exitos / (exitos + errores)) * 100)}%`);
    
    if (errores === 0) {
      console.log('\nüéâ ¬°VALIDACI√ìN EXITOSA!');
      console.log('‚úÖ La correcci√≥n del error est√° implementada correctamente');
      console.log('‚úÖ Todas las referencias est√°n corregidas');
      console.log('‚úÖ Los m√©todos necesarios est√°n implementados');
      console.log('‚úÖ El manejo de errores est√° en su lugar');
      console.log('\nüí° PR√ìXIMOS PASOS:');
      console.log('1. Ejecutar el servidor backend');
      console.log('2. Probar el cambio de estado de una orden');
      console.log('3. Verificar que no se produzcan errores de "Cannot read properties of undefined"');
      console.log('4. Confirmar que se env√≠en las notificaciones por email');
    } else {
      console.log('\n‚ö†Ô∏è VALIDACI√ìN CON ERRORES');
      console.log('‚ùå Se encontraron problemas que deben corregirse');
      console.log('üí° Revisa los errores listados arriba y corrige los archivos correspondientes');
    }
    
    return errores === 0;
    
  } catch (error) {
    console.error('‚ùå Error durante la validaci√≥n:', error.message);
    return false;
  }
}

// Ejecutar validaci√≥n
validarCorreccionNotificaciones();

