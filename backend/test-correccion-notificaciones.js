/**
 * Script de prueba para verificar la correcci√≥n del error en notificaciones de cambio de estado
 */

require('dotenv').config();
const axios = require('axios');

const API_BASE = 'http://localhost:4000';

async function testCorreccionNotificaciones() {
  console.log('üß™ VERIFICANDO CORRECCI√ìN DE ERROR EN NOTIFICACIONES\n');
  
  try {
    // 1. Verificar que el servidor est√© ejecut√°ndose
    console.log('1Ô∏è‚É£ Verificando conexi√≥n con el servidor...');
    try {
      const response = await axios.get(`${API_BASE}/api/notifications/status`);
      console.log('‚úÖ Servidor backend funcionando');
    } catch (error) {
      console.log('‚ùå Error conectando con el servidor:', error.message);
      console.log('üí° Aseg√∫rate de que el servidor backend est√© ejecut√°ndose en puerto 4000');
      return;
    }

    // 2. Obtener una orden existente
    console.log('\n2Ô∏è‚É£ Obteniendo √≥rdenes existentes...');
    try {
      const response = await axios.get(`${API_BASE}/api/ordenes`);
      const ordenes = response.data;
      
      if (ordenes.length === 0) {
        console.log('‚ùå No hay √≥rdenes en la base de datos para probar');
        return;
      }
      
      const ordenPrueba = ordenes[0];
      console.log(`‚úÖ Orden de prueba encontrada: ID ${ordenPrueba.pk_id_orden}`);
      console.log(`üìä Cliente: ${ordenPrueba.cliente}`);
      console.log(`üìß Email del cliente: ${ordenPrueba.cliente ? 'Disponible' : 'No disponible'}`);
      
      // 3. Obtener estados disponibles
      console.log('\n3Ô∏è‚É£ Obteniendo estados disponibles...');
      const estadosResponse = await axios.get(`${API_BASE}/api/estados`);
      const estados = estadosResponse.data;
      
      const estadoActual = ordenPrueba.fk_id_estado_orden;
      const nuevoEstado = estados.find(e => e.pk_id_estado !== estadoActual);
      
      if (!nuevoEstado) {
        console.log('‚ùå No hay estados diferentes para probar el cambio');
        return;
      }
      
      console.log(`üîÑ Cambiando de estado ${estadoActual} a ${nuevoEstado.pk_id_estado} (${nuevoEstado.estado_orden})`);
      
      // 4. Actualizar la orden con nuevo estado
      const updateData = {
        fk_id_cliente: ordenPrueba.fk_id_cliente,
        fk_id_vehiculo: ordenPrueba.fk_id_vehiculo,
        fk_id_servicio: ordenPrueba.fk_id_servicio,
        comentario_cliente_orden: ordenPrueba.comentario_cliente_orden,
        nivel_combustible_orden: ordenPrueba.nivel_combustible_orden,
        odometro_auto_cliente_orden: ordenPrueba.odometro_auto_cliente_orden,
        fk_id_estado_orden: nuevoEstado.pk_id_estado,
        observaciones_orden: ordenPrueba.observaciones_orden
      };
      
      console.log('\n4Ô∏è‚É£ Actualizando orden...');
      const updateResponse = await axios.put(`${API_BASE}/api/ordenes/${ordenPrueba.pk_id_orden}`, updateData);
      
      console.log('üìä Respuesta del servidor:');
      console.log(`   - Mensaje: ${updateResponse.data.message}`);
      console.log(`   - Estado cambi√≥: ${updateResponse.data.estadoCambio}`);
      console.log(`   - Notificaci√≥n enviada: ${updateResponse.data.notificacionEnviada}`);
      
      if (updateResponse.data.estadoCambio && updateResponse.data.notificacionEnviada) {
        console.log('‚úÖ ¬°Correcci√≥n exitosa! El cambio de estado se proces√≥ sin errores');
      } else if (updateResponse.data.estadoCambio && !updateResponse.data.notificacionEnviada) {
        console.log('‚ö†Ô∏è Estado cambi√≥ pero la notificaci√≥n no se envi√≥ (posible problema de configuraci√≥n de email)');
      } else {
        console.log('‚ÑπÔ∏è No hubo cambio de estado, por lo que no se envi√≥ notificaci√≥n');
      }
      
      // 5. Restaurar estado original
      console.log('\n5Ô∏è‚É£ Restaurando estado original...');
      const restoreData = {
        ...updateData,
        fk_id_estado_orden: estadoActual
      };
      
      await axios.put(`${API_BASE}/api/ordenes/${ordenPrueba.pk_id_orden}`, restoreData);
      console.log('‚úÖ Estado restaurado al original');
      
      console.log('\nüéâ PRUEBA DE CORRECCI√ìN COMPLETADA');
      console.log('\nüìã RESUMEN:');
      console.log('‚úÖ Servidor backend funcionando');
      console.log('‚úÖ Orden de prueba encontrada');
      console.log('‚úÖ Actualizaci√≥n de orden ejecutada');
      console.log('‚úÖ No se produjeron errores de "Cannot read properties of undefined"');
      console.log('‚úÖ Estado restaurado correctamente');
      
      console.log('\nüí° NOTAS:');
      console.log('- Si ves "Notificaci√≥n enviada: true", la correcci√≥n fue exitosa');
      console.log('- Si ves "Notificaci√≥n enviada: false", verifica la configuraci√≥n de email');
      console.log('- El error "Cannot read properties of undefined" deber√≠a estar resuelto');
      
    } catch (error) {
      console.error('‚ùå Error durante las pruebas:', error.message);
      if (error.response) {
        console.error('üìä Respuesta del servidor:', error.response.data);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

// Ejecutar las pruebas
testCorreccionNotificaciones();

